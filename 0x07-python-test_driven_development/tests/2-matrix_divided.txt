
matrix_divided = __import__('2-matrix_divided').matrix_divided

expected_output = matrix_divided(matrix, div)


# Test case 1
# Test division with integer value
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
div = 2
expected_output = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

# Test case 2
# Test division with float value
matrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
div = 3.0
expected_output = [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]

# Test case 3
# Test division with negative value
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
div = -2
expected_output = [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0], [-3.5, -4.0, -4.5]]

# Test case 4
# Test division by zero
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
div = 0
expected_output = "ZeroDivisionError: division by zero"

# Test case 5
# Test invalid matrix with different row sizes
matrix = [[1, 2, 3], [4, 5], [7, 8, 9]]
div = 2
expected_output = "TypeError: Each row of the matrix must have the same size"

# Test case 6
# Test invalid matrix with non-numeric elements
matrix = [[1, 2, 3], ["4", 5, 6], [7, 8, 9]]
div = 2
expected_output = "TypeError: matrix must be a matrix (list of lists) of integers/floats"

# Test case 7
# Test missing div parameter
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
expected_output = "TypeError: matrix_divided() missing 1 required positional argument: 'div'"

